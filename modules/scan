#!/bin/bash

Full_Scan() {
	ports=$1
	TitleMessage "Stage 3: Refined Scan" "sub"
	InfoMessage "Analysing open ports..."
	results=$(nmap -sC -sV -Pn -p"$ports" -oA "$resultsPath"/"$fullmachine" "$target")
	resultsFile="$resultsPath/$fullmachine.nmap"
	SuccessMessage "Complete!"
	InfoMessage "Full results can be found in ${YELLOW}$resultsPath${PLAIN}" 
	TitleMessage "Stage 4: UDP Scan" "sub"
	read -rp "Scan UDP ports? [y/N] " yn
		case $yn in
		[yY])
			InfoMessage "Scanning for common UDP ports"
			top_ports_udp=$(sudo nmap -sU --top-ports 100 -Pn -T4 "$target")
			udp_ports=$(echo "$top_ports_udp" | grep "^[0-9]" | cut -d '/' -f 1,3)
			udp_ports_formatted=$(echo "$top_ports_udp" | grep "^[0-9]" |  awk -F '/tcp' '{print $1 " " $2}' | awk '{print $1 " " $3}')
			echo "$udp_ports_formatted" > "$resultsPath"/$udp_ports_file
			while IFS= read -r top_ports_formatted; do
			openPort="$(cut -d' ' -f1 <<< $udp_ports_formatted)"
			service="$(cut -d' ' -f2 <<< $udp_ports_formatted)"
			AlertMessage "Port $openPort ($service) is open." 
			done <<< "$top_ports_formatted"
			listofports=$(echo "$udp_ports" | tr '\n' ',' | sed s/,$//)
			udpresults=$(sudo nmap -sC -sV -Pn -p"$listofports" -oA "$resultsPath"/"$fullmachine" "$target")
			;;
		*)
			;;
		esac
	SuccessMessage "Scanning complete!"
	TitleMessage "Analysis"
	$naesDir/naes -a $fullmachine
	InfoMessage "Run naes -a $fullmachine to re-reun the analysis only!"
	
}

Get_Open_Ports() {
	runtime=$(date)
	TitleMessage "Scanning" "main"
	echo "$runtime" > "$resultsPath/runtime"
	InfoMessage "Scan started at: ${YELLOW}$runtime${PLAIN}"
	InfoMessage "Target IP: ${YELLOW}$target${PLAIN}"
	if [[ -n $fullmachine ]]; then
		InfoMessage "Alias: ${YELLOW}$fullmachine${PLAIN}"
	fi
	top_ports_nmap=$(nmap -sT --top-ports 1000 -Pn -T4 "$target")
	top_ports=$(echo "$top_ports_nmap" | grep "^[0-9]" | cut -d '/' -f 1,3)
	top_ports_formatted=$(echo "$top_ports_nmap" | grep "^[0-9]" |  awk -F '/tcp' '{print $1 " " $2}' | awk '{print $1 " " $3}')
	TitleMessage "Stage 1: Common Ports" "sub"
	InfoMessage "Scanning the top 1000 ports with nmap"
	echo "$top_ports_formatted" > "$resultsPath"/$top_ports_file
	while IFS= read -r top_ports_formatted; do
	openPort="$(cut -d' ' -f1 <<< $top_ports_formatted)"
	service="$(cut -d' ' -f2 <<< $top_ports_formatted)"
	AlertMessage "Port $openPort ($service) is open." 
	if [[ "$openPort" == "$http" ]]; then
		AlertMessage "Check http://$target"
	
	elif [[ "$openPort" == "$https" ]]; then
		AlertMessage "Check https://$target"
	
	elif [[ "$openPort" == "$althttp" ]]; then
		AlertMessage "Check http://$target:8080"		
	fi
	done <<< "$top_ports_formatted"
	
	if [[ "$top_ports" == *"$dns"* && "$top_ports" == *"$kerb"* && "$top_ports" == *"$ldap"* ]]; then
		AlertMessage "$target could be a Domain Controller." 
		InfoMessage "Ports 88 (Kerberos), 53 (DNS) and 389 (LDAP) are open on the host"
	fi
	TitleMessage "Stage 2: All Ports" "sub"
	InfoMessage "Scanning all ports with nmap"
	all_ports_nmap=$(nmap -sT -p- -Pn -T4 "$target")
	all_ports=$(echo "$all_ports_nmap" | grep "^[0-9]" | cut -d '/' -f 1,3)
	all_ports_formatted=$(echo "$all_ports_nmap" | grep "^[0-9]" | awk -F '/tcp' '{print $1 " " $2}' | awk '{print $1 " " $3}')
	if [[ "$top_ports" == "$all_ports" ]]; then
		FailedMessage "No new ports found"
		cp "$resultsPath/$top_ports_file" "$resultsPath/$all_ports_file"
	else
		SuccessMessage "More ports found!"
		AlertMessage "The following ports responded as OPEN"
		echo "$all_ports_formatted" > "$resultsPath"/$all_ports_file
		while IFS= read -r top_ports_formatted; do
		openPort="$(cut -d' ' -f1 <<< $all_ports_formatted)"
		service="$(cut -d' ' -f2 <<< $all_ports_formatted)"
		AlertMessage "Port $openPort ($service) is open." 
		done <<< "$all_ports_formatted"
	fi
	listofports=$(echo "$all_ports" | tr '\n' ',' | sed s/,$//)
	Full_Scan "$listofports"
}